
E32_DRAM_ZEROPAGE_LEXINGTON 	= 0x81000000
E32_DRAM_ZEROPAGE_NEEDHAM 		= 0x8e000000
E32_DRAM_ZEROPAGE_NEEDHAMPRO 	= 0x8e000000
E32_DRAM_ZEROPAGE_BLANK 		= 0x8e000000

### 
### Makefile for libcoprthr-e
###

prefix=@prefix@
exec_prefix=@exec_prefix@

### this useless define is needed to silence useless autoconf warning
datarootdir=@datarootdir@

LIBELF_INC=@libelf_inc@
LIBELF_LIB=@libelf_lib@

### select default install paths 
INSTALL_BIN_DIR=@bindir@
INSTALL_LIB_DIR=@libdir@
INSTALL_INCLUDE_DIR=@includedir@
INSTALL_MAN_DIR=@mandir@

### set custom path for ICD files
ifneq (@OPENCL_ICD_PATH@,)
OPENCL_ICD_PATH=@OPENCL_ICD_PATH@
else
OPENCL_ICD_PATH=@sysconfdir@/OpenCL/vendors/
endif

#ifeq (@ENABLE_LIBCOPRTHR_DEBUG_STANDARD@,1)
#DEFS += -DXCL_REPORT -DXCL_REPORT_DEFAULT_LEVEL=5
#endif
ifeq (@ENABLE_SILENT@,1)
DEFS += -DENABLE_SILENT
endif
ifneq (@MAX_CLMESG_LEVEL@,)
DEFS += -DMAX_CLMESG_LEVEL=@MAX_CLMESG_LEVEL@
endif
ifneq (@DEFAULT_CLMESG_LEVEL@,)
DEFS += -DDEFAULT_CLMESG_LEVEL=@DEFAULT_CLMESG_LEVEL@
endif

ifeq (@ENABLE_EMEK_BUILD@,1)
DEFS += -DENABLE_EMEK_BUILD
endif

ifeq (@ENABLE_OLD_ESDK@,1)
DEFS += -DUSE_OLD_ESDK
endif


#ESDK_INC = -I/opt/adapteva/esdk/tools/host/x86_64/include \
#   -I/opt/adapteva/esdk/tools/gnu/epiphany-elf/sys-include
#ESDK_LIB = -L/opt/adapteva/esdk/tools/host/x86_64/lib -le_host

#ESDK_INC = -I/usr/local/adapteva/include -I/usr/local/adapteva/elib
#ESDK_LIB = -L/usr/local/adapteva/lib -le-host -le-loader

#ESDK_INC = -I@ESDK_PATH@/include
#ESDK_LIB = -L@ESDK_PATH@/lib 
ESDK_EINC = -I@ESDK_PATH@/elib

ifeq (@ENABLE_EMEK_BUILD@,1)
#ESDK_INC += -I/opt/adapteva/esdk/tools/gnu/epiphany-elf/sys-include
#ESDK_LIB += -le_host
ESDK_INC += -I@ESDK_PATH@/tools/host/x86_64/include
ESDK_LIB += -L@ESDK_PATH@/tools/host/x86_64/lib -le_host
else ifeq (@ENABLE_OLD_ESDK@,1)
#ESDK_LIB += -le-host -le-loader
#ESDK_INC += -I@ESDK_PATH@/tools/host/armv71/include
ESDK_INC += -I@ESDK_PATH@/tools/host/armv7l/include
ESDK_LIB += -L@ESDK_PATH@/tools/host/armv7l/lib -le-loader -le-host
else
ESDK_INC += -I@ESDK_PATH@/tools/host/include
ESDK_LIB += -L@ESDK_PATH@/tools/host/lib -le-hal 
endif

############################################################################
##### DO NOT MODIFY BELOW THIS LINE UNLESS YOU KNOW WHAT YOU ARE DOING #####
############################################################################

OCL_OBJS = ocl_command_queue.o ocl_context.o ocl_device.o ocl_enqueue.o \
	ocl_event.o ocl_program.o ocl_flush.o ocl_sampler.o ocl_profile.o \
	ocl_kernel.o ocl_memobj.o ocl_platform.o ocl_clgl.o xcl_icd.o

#XCL_OBJS = xcl_platform.o xcl_device.o xcl_context.o xcl_command_queue.o \
#	xcl_enqueue.o xcl_event.o xcl_program.o xcl_kernel.o xcl_memobj.o \
#	xcl_flush.o

IMP_OBJS = platform.o device.o context.o command_queue.o event.o \
	environment.o \
	program.o kernel.o memobj.o \
	cmdsched.o cmdcall.o \
	elf_cl.o \
	watermark.o \
	dmalloc.o \
	icd.o

#RT_OBJS = _e32pth_core_main_needham.o _e32pth_core_needham.ldf \
#	_e32pth_core_main_needhampro.o _e32pth_core_needhampro.ldf

INSTALL_HDRS = workp.h opencl_lift.h e32_opencl_ext.h 

INSTALL_LIBS = libcoprthr-e.so 



ifeq (@ENABLE_EMEK_BUILD@,1)

#IMP_OBJS += compiler_e32_emek.o cmdcall_e32pth.o e32pth_engine.o
IMP_OBJS += cmdcall_e32pth.o e32pth_engine.o

RT_OBJS = _e32pth_core_main.o _e32pth_core.ldf

INSTALL_HDRS += e32pth_if.h e32pth_mem_if.h e32_config.h

INSTALL_LIBS += libe_platform.so.lexington

DEFAULT_E_PLATFORM_LIB = libe_platform.so.lexington

else

#IMP_OBJS += compiler_e32_needham.o compiler_e32_needhampro.o \
	cmdcall_e32pth_needham.o cmdcall_e32pth_needhampro.o \
	e32pth_engine_needham.o e32pth_engine_needhampro.o \
	compiler_e32_blank.o cmdcall_e32pth_blank.o e32pth_engine_blank.o

IMP_OBJS += \
	cmdcall_e32pth_needham.o cmdcall_e32pth_needhampro.o \
	e32pth_engine_needham.o e32pth_engine_needhampro.o \
	cmdcall_e32pth_blank.o e32pth_engine_blank.o

RT_OBJS = _e32pth_core_main_needham.o _e32pth_core_needham.ldf \
	_e32pth_core_main_needhampro.o _e32pth_core_needhampro.ldf \
	_e32pth_core_main_blank.o _e32pth_core_blank.ldf

INSTALL_HDRS += \
	e32pth_if_needham.h e32pth_mem_if_needham.h e32_config_needham.h \
	e32pth_if_needhampro.h e32pth_mem_if_needhampro.h e32_config_needhampro.h \
	e32pth_if_blank.h e32pth_mem_if_blank.h e32_config_blank.h

INSTALL_LIBS += libe_platform.so.needham libe_platform.so.needhampro \
	libe_platform.so.blank

DEFAULT_E_PLATFORM_LIB = libe_platform.so.needham

endif




DEFS += -DINSTALL_LIB_DIR=\"$(INSTALL_LIB_DIR)\" 
DEFS += -DENABLE_NCPU

DEFS += -DLIBCOPRTHR_CC=\"@LIBCOPRTHR_CC@\"
DEFS += -DLIBCOPRTHR_CXX=\"@LIBCOPRTHR_CXX@\"

######################################################################

TOPDIR ?= ../../

SCRIPTS = ../scripts/
OCLCALL_MASTER = ../libocl/oclcall.master

INCS += -I. -I$(TOPDIR)/include 

INCS += $(LIBELF_INC)
INCS += $(ESDK_INC)

LIBS += $(LIBELF_LIB)
LIBS += $(ESDK_LIB)


LIBS += -lfl  -lpthread -lrt
ifeq (freebsd,$(patsubst freebsd%,freebsd,@build_os@))
LIBS += -lc 
else
LIBS += -ldl 
endif

OBJS = $(OCL_OBJS) $(IMP_OBJS)

OBJS_D = $(subst .o,_d.o,$(OBJS))

DEFS += \
	-DINSTALL_BIN_DIR=\"$(INSTALL_BIN_DIR)\" \
	-DINSTALL_LIB_DIR=\"$(INSTALL_LIB_DIR)\" \
	-DINSTALL_INCLUDE_DIR=\"$(INSTALL_INCLUDE_DIR)\" 

DEFS += -D__coprthr_host__

DISABLE_UBUNTU_FLAGS = -U_FORTIFY_SOURCE -fno-stack-protector \
       -Wno-unused-result -Wno-format-security -Wno-format
CCFLAGS += -O2 -fPIC $(DISABLE_UBUNTU_FLAGS)

ifeq (arm,$(patsubst arm%,arm,@build_cpu@))
CCFLAGS += -marm
endif

CCFLAGS_VCORE = FAIL
CCFLAGS_VCORE_RT = FAIL

ECCFLAGS = -Dasm=__asm__ -O0 -g -Wall -D__coprthr_device__\
	-fmessage-length=0  -ffast-math \
	-ftree-vectorize -funroll-loops -std=c99 -Wunused-variable \
	-ffp-contract=fast -mlong-calls -mfp-mode=round-nearest  \
	-U_FORTIFY_SOURCE -fno-stack-protector -fstack-usage 
	



#YACC = yacc
YACC = bison
YACCCFLAGS =  -y -v 

LEX = flex
LEXFLAGS = 

XCLNM_YYPREFIX = __xclnm_

TARGET = libcoprthr-e.so $(RT_OBJS) 
#TARGET += libcoprthr-e_d.so
TARGET += icd.c


ifeq (@ENABLE_EMEK_BUILD@,1)
TARGET += libe_platform.so.lexington
else
TARGET += libe_platform.so.needham
TARGET += libe_platform.so.needhampro
TARGET += libe_platform.so.blank
endif

VPATH = ../coprthr-common/

all: $(TARGET) 

.PHONY: clean install uninstall

.SUFFIXES:
.SUFFIXES: .l .y .S .s .c .o


.c.o:
	$(CC) $(CCFLAGS) $(DEFS) $(INCS) -c $<

.s.o:
	$(CC) $(CCFLAGS) $(DEFS) $(INCS) -c $<

.S.o:
	$(CC) $(CCFLAGS) $(DEFS) $(INCS) -c $<

%_d.o:
	$(CC) $(CCFLAGS) $(DEFS) -DXCL_REPORT $(INCS) -c $*.c -o $*_d.o

icd.c:
	perl $(SCRIPTS)/gen_ocl_call_vector.pl __icd_call_vector _ \
		< $(OCLCALL_MASTER) > icd.c

compiler_e32_needham.o: compiler_e32.c
	$(CC) $(CCFLAGS) $(DEFS) -D__COPRTHR_TARGET_E32_NEEDHAM__ \
		$(INCS) -c compiler_e32.c -o $*.o

compiler_e32_needhampro.o: compiler_e32.c
	$(CC) $(CCFLAGS) $(DEFS) -D__COPRTHR_TARGET_E32_NEEDHAMPRO__ \
		$(INCS) -c compiler_e32.c -o $*.o

compiler_e32_blank.o: compiler_e32.c
	$(CC) $(CCFLAGS) $(DEFS) -D__COPRTHR_TARGET_E32_BLANK__ \
		$(INCS) -c compiler_e32.c -o $*.o


libe_platform.so.lexington: 
	$(CC) $(CCFLAGS) $(DEFS) $(INCS) -DCOMPILE_FOR_LEXINGTON -c e_platform.c
	$(CC) $(CCFLAGS) $(ESDK_INCS) \
		-shared -Wl,-soname,libe_platform.so -o libe_platform.so.lexington  \
		e_platform.o $(ESDK_LIBS)

libe_platform.so.needham: 
	$(CC) $(CCFLAGS) $(DEFS) $(INCS) -DCOMPILE_FOR_NEEDHAM -c e_platform.c
	$(CC) $(CCFLAGS) $(ESDK_INCS) \
		-shared -Wl,-soname,libe_platform.so -o libe_platform.so.needham  \
		e_platform.o $(ESDK_LIBS)

libe_platform.so.needhampro: 
	$(CC) $(CCFLAGS) $(DEFS) $(INCS) -DCOMPILE_FOR_NEEDHAMPRO -c e_platform.c
	$(CC) $(CCFLAGS) $(ESDK_INCS) \
		-shared -Wl,-soname,libe_platform.so -o libe_platform.so.needhampro  \
		e_platform.o $(ESDK_LIBS)

libe_platform.so.blank: 
	$(CC) $(CCFLAGS) $(DEFS) $(INCS) -DCOMPILE_FOR_BLANK -c e_platform.c
	$(CC) $(CCFLAGS) $(ESDK_INCS) \
		-shared -Wl,-soname,libe_platform.so -o libe_platform.so.blank  \
		e_platform.o $(ESDK_LIBS)

libe_platform.so: $(DEFAULT_E_PLATFORM_LIB)
	ln -s $(DEFAULT_E_PLATFORM_LIB) libe_platform.so


libcoprthr-e.so: $(OBJS) libe_platform.so
	$(CC) $(CCFLAGS) $(INCS) \
		-shared -Wl,-soname,libcoprthr-e.so -o libcoprthr-e.so  $(OBJS) $(LIBS) \
		-L./ -le_platform


_e32pth_core_main.o: _e32pth_core_main.c
	e-gcc -c $(ECCFLAGS) \
		-DE32_DRAM_ZEROPAGE=$(E32_DRAM_ZEROPAGE_LEXINGTON) \
		-o _e32pth_core_main.o _e32pth_core_main.c


_e32pth_core_main_needham.o: _e32pth_core_main_needham.c
	e-gcc -c $(ECCFLAGS) $(ESDK_EINC) \
		-DE32_DRAM_ZEROPAGE=$(E32_DRAM_ZEROPAGE_NEEDHAM) \
		-o _e32pth_core_main_needham.o _e32pth_core_main_needham.c

_e32pth_core_main_needhampro.o: _e32pth_core_main_needhampro.c
	e-gcc -c $(ECCFLAGS) $(ESDK_EINC) \
		-DE32_DRAM_ZEROPAGE=$(E32_DRAM_ZEROPAGE_NEEDHAMPRO) \
		-o _e32pth_core_main_needhampro.o _e32pth_core_main_needhampro.c

_e32pth_core_main_blank.o: _e32pth_core_main_blank.c
	e-gcc -c $(ECCFLAGS) $(ESDK_EINC) \
		-DE32_DRAM_ZEROPAGE=$(E32_DRAM_ZEROPAGE_BLANK) \
		-o _e32pth_core_main_blank.o _e32pth_core_main_blank.c



debug:
	export ENABLE_DEBUG=1
	make -f Makefile all


install: 
	test -d $(DESTDIR)$(INSTALL_INCLUDE_DIR) || install -m 755 -d $(DESTDIR)$(INSTALL_INCLUDE_DIR)
	test -d $(DESTDIR)$(INSTALL_LIB_DIR) || install -m 755 -d $(DESTDIR)$(INSTALL_LIB_DIR)
	test -d $(DESTDIR)$(INSTALL_BIN_DIR) || install -m 755 -d $(DESTDIR)$(INSTALL_BIN_DIR)
	install -m 755 $(INSTALL_LIBS) $(DESTDIR)$(INSTALL_LIB_DIR)
	ln -sf $(INSTALL_LIB_DIR)/$(DEFAULT_E_PLATFORM_LIB) \
		$(DESTDIR)$(INSTALL_LIB_DIR)/libe_platform.so
	install -m 755 $(RT_OBJS) $(DESTDIR)$(INSTALL_LIB_DIR)
	install -m 755 $(INSTALL_HDRS) $(DESTDIR)$(INSTALL_INCLUDE_DIR)
	test -d $(DESTDIR)$(OPENCL_ICD_PATH) || install -m 755 -d $(DESTDIR)$(OPENCL_ICD_PATH)
	echo $(INSTALL_LIB_DIR)/libcoprthr-e.so > $(DESTDIR)$(OPENCL_ICD_PATH)/coprthr-e.icd

uninstall: 
	rm -f $(addprefix $(DESTDIR)$(INSTALL_LIB_DIR)/,$(INSTALL_LIBS))
	rm -f $(DESTDIR)$(INSTALL_LIB_DIR)/libe_platform.so
	rm -f $(addprefix $(DESTDIR)$(INSTALL_LIB_DIR)/,$(RT_OBJS))
	rm -f $(addprefix $(DESTDIR)$(INSTALL_INCLUDE_DIR)/,$(INSTALL_HDRS))
	rm -f $(DESTDIR)$(OPENCL_ICD_PATH)/coprthr-e.icd

clean:
	rm -f *.o *.so *.su libe_platform.so.*

distclean: clean


